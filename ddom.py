import sys
import re
import urllib.request
import urllib.error
import urllib.parse
import random
import requests
import os
import argparse
import pyvirtualdisplay
from selenium import webdriver
import datetime
import zipfile
from pathlib import Path

timestamp_now = datetime.datetime.now().strftime('%Y-%m-%d')

print("""\n
# Daily Dose of Malware (DDoM) v3.0
#
# Original author: https://github.com/notnop
# Rewritten by Enderman and Matt in Python 3!
# Edited by AnErrupTion to make it better (v3.0).
#
# %%%%&&&&..............%%%/       Malware is art!
# %%%%&&&&.........&&&..%%%%%      Don't let it become a filthy criminal's tool!
# %%%%&&&&.........&&&..%%%%%%%
# %%%%&&&&.........&&&..%%%%%%%
# %%%%&&&&.........,,,..%%%%%%%
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%  _________________ .%%%%
# %%%%  _________________ .%%%%
# %%%%  _________________ .%%%%
# %%%%  _________________ .%%%%
# %%%%  _________________ .%%%%
# %%%%  _________________ .%%%%
# %&&%                    ,%&&%
# %&&%%%%%%%%%%%%%%%%%%%%%%%&&%
# %&&%%%%%%%%%%%%%%%%%%%%%%%&&%\n""")

# Flags
parser = argparse.ArgumentParser(description='DDoM v3.0')
parser.add_argument("-c", "--count", nargs=1, type=int, help="Defines the number of malware samples you want, up to 5000. If the argument is omitted, sets to 100 by default.",
                required=False, default=argparse.SUPPRESS, metavar="SAMPLES")

def confirmation(question, default="yes"):
    valid = {"yes": True, "y": True, "ye": True,
                "no": False, "n": False}
    if default is None:
        prompt = " [y/n] "
    elif default == "yes":
        prompt = " [Y/n] "
    elif default == "no":
        prompt = " [y/N] "
    validInputEntered = False
    while not validInputEntered:
        data = input("{}{}".format(question, prompt)).lower()
        if data in valid:
            validInputEntered = True
            return valid[data]
        if data == "":
            validInputEntered = True
            return default


args = parser.parse_args()
if not "count" in args:
    print("[*]  Argument was omitted - going with 100 samples by default")
    scount = 100
else:
    scount = args.count[0]

# Global variables

final_list = []  # Malware address collector
headers = {
	'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36 Edg/80.0.361.111'
}

print("""\nYou'll get latest {} samples from:
\t# https://dasmalwerk.eu/
\t# http://malc0de.com/database/
\t# http://vxvault.net/ViriList.php
\t# http://tracker.h3x.eu/
\t# https://google.com/ (with the help of dorks)
""".format(scount))

confirmed = confirmation("Confirm and start downloading {} samples?".format(scount), "yes")
if not confirmed:
    sys.exit(0)

print("\nSearching links...")

# Malc0de
def malc0de(samples):
    global final_list

    url_list = []

    if samples <= 50:
        pages = 1
    else:
        pages = (samples // 50) + 1

    # Browsing pages
    for i in range(0, pages):
        address = "https://malc0de.com/database/?&page=" + str(i)
        req = requests.get(address, headers=headers)
        con = req.content.decode("utf-8")
        b = re.findall("<td>[\d]{4}-[\d]{2}-[\d]{2}<\/td>\n.+\n", con)
        if b:
            for i in b:
                date = re.search("<td>([\d]{4}-[\d]{2}-[\d]{2})<\/td>", i)
                malware = re.search("\t<td>(.+)<\/td>", i)
                if date and malware:
                    malware = re.sub("<br\/>", "", malware.group(1))
                    if ".exe" in temp_mal_address:
                        url_list.append(malware)

    final_list += url_list
    print("[*]  Malc0de - Done " + str(len(url_list)) + " links.")


# VXVault
def vxvault(nr_samples):
    global final_list

    url_list = []
    address = "http://vxvault.net/ViriList.php?s=0&m=" + str(nr_samples)

    req = requests.get(address, headers=headers)
    con_page = req.content.decode("utf-8")

    # Find all malware addresses
    page = con_page.split("\r")
    for i in page:
        match = re.search("href='ViriFiche\.php\?ID=[\d]+'>(.+)</a></TD>", i)
        if match:
            temp_mal_address = match.group(1)
            if not re.search("[\d]{1,2}-[\d]{1,2}", temp_mal_address):
                # Add malware address
                if ".exe" in temp_mal_address:
                    url_list.append(temp_mal_address)

    final_list += url_list
    print("[*]  VXVault - Done " + str(len(url_list)) + " links.")


def h3x_get(nr_samples):
    lst = []

    address = "http://tracker.h3x.eu/"
    req = urllib.request.Request(address, None, headers)
    con_page = urllib.request.urlopen(req).readlines()

    for linie in con_page:
        match = re.findall("href='/site/([A-Za-z0-9%\._-]+)", linie.decode("utf-8"))
        lst += match
        if len(lst) >= nr_samples:
            return lst
    return lst


def h3x_clean(x):
    global final_list
    list = h3x_get(x)
    new_list = []

    # Cleaning
    for i in list:
        i = re.sub("%3A", ":", i)
        i = re.sub("%2F", "/", i)
        new_list.append(i)

    final_list += new_list
    print("[*]  tracker.h3x - Done " + str(len(new_list)) + " links.")


def dasmalwerk_get(nr_samples):
    url_list = []

    address = "https://das-malwerk.herokuapp.com/"
    req = urllib.request.Request(address, None, headers)
    con_page = urllib.request.urlopen(req).readlines()

    # Find all malware addresses
    for i in con_page:
        match = re.findall("https\:\/\/([A-Za-z0-9-/\._-]+)\">Download", i.decode("utf-8"))
        url_list += match
        if len(url_list) >= nr_samples:
            return url_list
    return url_list


def dasmalwerk_clean(nr_samples):
    global final_list
    url_list = dasmalwerk_get(nr_samples)
    new_list = []

    # Cleaning
    for i in url_list:
        i = re.sub("\">Download", "", i)
        new_list.append(i)

    final_list += new_list
    print("[*]  DasMalwerk - Done " + str(len(url_list)) + " links.")


def google():
    dorks = {"Pony": ["intitle:Authorization inurl:panel*/admin.php intext:Authorization. Sign in.",
                      "intitle:Authorization inurl:panel*/*admin.php",
                      "intitle:Authorization inurl:*admin.php Authorization. User Password Save password. Login. TF."],
             "WannaCry": ["intitle:\"index of\" \"@Please_Read_Me@.txt",
                          "intitle:\"index of\" \"@WanaDecryptor@.exe"],
             "Stealer": "intitle:\"(c) Bilal Ghouri\"",
             "LokiBot": "inurl:PvqDq929BSx_A_D_M1n_a.php intitle:Auth",
             "1ms0rry": "intitle:1ms0rry MINERPANEL",
             "SpyEye": "intitle:FRMCP intext:Please, enter password"}

    links_list = []

    print("[*]  Google - Starting Firefox...")
    print("[*]  Google - NOTE : Do NOT control Firefox while it's running!")

    browser = webdriver.Firefox()
    for i in dorks.keys():
        if i == "Pony":
            for j in dorks[i]:
                browser.get('https://www.google.com/search?q=' + j + "&t=h_&ia=web")
                links = browser.find_elements_by_xpath("//h3//a[@href]")
                for elem in links:
                    link = elem.get_attribute("href")
                    links_list.append(link)

        elif i == "WannaCry":
            for j in dorks[i]:
                browser.get('https://www.google.com/search?q=' + j + "&t=h_&ia=web")
                links = browser.find_elements_by_xpath("//h3//a[@href]")
                for elem in links:
                    link = elem.get_attribute("href")
                    links_list.append(link)

        else:
            browser.get('https://www.google.com/search?q=' + dorks[i] + "&t=h_&ia=web")
            links = browser.find_elements_by_xpath("//h3//a[@href]")
            for elem in links:
                link = elem.get_attribute("href")
                links_list.append(link)

    browser.quit()
    print("[*]  Google - Done " + str(len(links_list)) + " links.")


# Collect samples address:
try:
    dasmalwerk_clean(scount)
except Exception as e:
    print("Error on DasMalwerk : " + str(e))

try:
    malc0de(scount)
except Exception as e:
    print("Error on Malc0de : " + str(e))

try:
    vxvault(scount)
except Exception as e:
    print("Error on VXVault : " + str(e))

try:
    h3x_clean(scount)
except Exception as e:
    print("Error on tracker.h3x : " + str(e))

try:
    google()
except Exception as e:
    print("Error on Google : " + str(e))

final_list = list(set(final_list))
print("\nUnique addresses : ", len(final_list))
print("Downloading...")

charset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"

# Generate random string
def get_random_word(length):
    word = ''
    for i in range(length):
        word += random.choice(charset)
    return word


def download_file(address):
    destination_folder = os.getcwd() + "/Samples/"

    if not os.path.exists(destination_folder):
        os.makedirs(destination_folder)

    # Try to download sample
    try:
        # Check if URL start with "http://"
        if address[:7] != "http://":
            address = "http://" + address

        # Filename
        filename = destination_folder + str(get_random_word(8))
        if ".zip" in address:
            filename += ".zip"
        else:
            filename += ".exe"

        # Construct URL and set timeout
        req = urllib.request.Request(address, None, headers)
        u = urllib.request.urlopen(req, timeout=4).read() # Timeout 5 seconds

        # Write to file
        f = open(filename, 'wb')
        f.write(u)
        f.close()

        # Print to console
        print("[*]  Downloaded : " + filename + " with address: " + address)

        # Verify if file has .zip extension, so we know it's from DasMalwerk
        pre, ext = os.path.splitext(filename)
        if "zip" in ext:
            zipf = zipfile.ZipFile(filename)
            zipf.extractall(destination_folder, None, bytes("infected", "utf-8"))
            zipfn = destination_folder + zipf.namelist()[0]
            zipf.close()
            os.remove(filename)
            p = Path(zipfn)
            p.rename(p.with_suffix('.exe'))

        # Verify file for any bad entry
        print("[*]  Verifying file...")

        f = open(filename)
        ff = f.read()
        f.close()

        if ff == "" or "</html>" in ff or "404" in ff or "<!DOCTYPE html>" in ff or "<!DOCTYPE HTML" in ff or "<html>" in ff or "<style>" in ff or "FORIIS" in ff:
            print("[*]  Bad file detected, removing it...")
            os.remove(filename)

    except Exception as e:
        print("Error : " + str(e))


for mal in final_list:
    download_file(mal)
